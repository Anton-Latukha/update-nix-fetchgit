{ pkgs ? import <nixpkgs> { }, compiler ? null, hoogle ? true }:

let
  src = pkgs.nix-gitignore.gitignoreSource [ ] ./.;

  compiler' = if compiler != null then
    compiler
  else
    "ghc" + pkgs.lib.concatStrings
    (pkgs.lib.splitVersion pkgs.haskellPackages.ghc.version);

  # Any overrides we require to the specified haskell package set
  haskellPackages = with pkgs.haskell.lib;
    pkgs.haskell.packages.${compiler'}.override {
      overrides = self: super:
        { } // pkgs.lib.optionalAttrs hoogle {
          ghc = super.ghc // { withPackages = super.ghc.withHoogle; };
          ghcWithPackages = self.ghc.withPackages;
        };
    };

  # Any packages to appear in the environment provisioned by nix-shell
  extraPackages = [ pkgs.git pkgs.nix pkgs.nix-prefetch-git ];

  # Generate a haskell derivation using the cabal2nix tool on `update-nix-fetchgit.cabal`
  drv = pkgs.haskellPackages.callCabal2nix "update-nix-fetchgit" src { };

  # Inject extraPackages to buildInputs due to test suite
  drvWithExtras = drv.overrideAttrs (attrs:
    {
        buildInputs = attrs.buildInputs ++ extraPackages;
    });

  # Insert the extra environment packages into the environment generated by
  # cabal2nix
  envWithExtras = pkgs.lib.overrideDerivation drv.env (attrs:
    {
      buildInputs = attrs.buildInputs ++ extraPackages;
    } // pkgs.lib.optionalAttrs hoogle {
      shellHook = attrs.shellHook + ''
        export HIE_HOOGLE_DATABASE="$(cat $(which hoogle) | sed -n -e 's|.*--database \(.*\.hoo\).*|\1|p')"
      '';
    });

in drvWithExtras // { env = envWithExtras; }
